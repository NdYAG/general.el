* About
[[https://github.com/noctuid/general.el][file:http://i.imgur.com/SXA66y7.png]]
#+BEGIN_QUOTE
A general is a leader. -- onioncheese
#+END_QUOTE

~general~ provides a more convenient way to bind keys in emacs for both evil and non-evil users. ~general-define-key~ allows defining multiple keys at once, implicitly wrapping key strings with ~(kbd ...)~, having named prefix key sequences (like the leader key in vim), and more.

* Advantages Over Evil-Leader
- Allows an arbitrary number of prefix keys or "leaders" of any length
- Does not /require/ a prefix key
- Allows choosing the evil state to map keys in
- Does not depend on evil (can be used for normal emacs keybindings)
- Does not use a global minor mode
- Wraps ~evil-define-key~ instead of weirdly re-implementing half of it
- Uses a single function for everything

* Basic Setup
** Non-evil
#+begin_src emacs-lisp
(require 'general)
(setq my-leader1 (kbd "C-c"))

;; bind "C-c a" and "C-c b" in global-map
(general-define-key :prefix my-leader1
                    "a" 'some-command
                    "b" 'another-command)

;; or without a prefix
(general-define-key
 "C-c a" 'some-command
 "C-c b" 'another-command)

;; bind a key in a specific keymap
(general-define-key :keymap org-mode-map
                    "TAB" 'org-cycle)

;; if you prefer an explicit (kbd) or don't want (kbd) at all:
(setq general-implicit-kbd nil)
(general-define-key
 (kbd "C-c a") 'some-command
 (kbd "C-c b") 'another-command)
#+end_src
** Evil
#+begin_src emacs-lisp
(require 'general)
;; bind a key globally in normal state
(setq general-default-keymap evil-normal-state-map)
;; bind j and k in normal state globally
(general-define-key
 "j" 'evil-next-visual-line
 "k" 'evil-previous-visual-line)

;; bind gj and gk
(general-define-key :prefix "g"
                    "j" 'evil-next-line
                    "k" 'evil-previous-line)

;; named prefix key
(setq my-leader1 ",")
(general-define-key :prefix my-leader1
                    "f" 'find-file)

;; a default prefix sequence
(setq general-default-prefix ",")
(general-define-key "f" 'find-file)

;; example of fully specifying everything
(general-define-key :keymap org-mode-map :prefix nil :state 'insert
                    "TAB" 'org-cycle)
#+end_src

Vim-like definitions:
#+begin_src emacs-lisp
(general-evil-setup)
(general-nmap "j" 'evil-next-visual-line
              "k" 'evil-previous-visual-line)
(general-nmap :prefix "SPC"
              "p" 'helm-mini)
;; alternatively
(general-evil-setup t)
(nmap "n" 'evil-next-line
      "e" 'evil-previous-line)
#+end_src
* More Details
This package provides one main function, ~general-define-key~, for key definitions for both evil and non-evil users. If you do not like keyword arguments or would like to create your own key-defining functions, this package also allows for these things.
** Settings
~general-implicit-kbd~ can be set to nil if you want to manually use ~(kbd "keys")~ or if you don't want to use kbd at all.

~general-default-prefix~, ~general-default-state~, and ~general-default-keymap~ determine the defaults for the keyword arguments. By default, there is no prefix or state, and the keymap is ~global-map~.

** Notes for Normal Emacs Users
Note that ~general-define-key~'s =:state= keyword is for evil only. The available keywords are =:prefix= and =:keymap=. =:prefix= can be a prefix of arbitrary length and defaults to none. =:keymap= will default to ~global-map~.

** Notes for Evil Users
When =:state= is specified (or ~general-default-state~ is non-nil), ~general-define-key~ will act as a wrapper around ~evil-define-key~. This means that the following are equivalent:

#+begin_src emacs-lisp
(setq general-defaul-state 'normal)
(general-define-key
 "j" 'my-j)

(evil-define-key 'normal global-map
  "j" 'my-j)
#+end_src

Note that the "standard" way to define global keybindings in normal mode is as follows:
#+begin_src emacs-lisp
(define-key evil-normal-state-map "j" 'my-j)
(define-key evil-normal-state-map "k" 'my-k)
#+end_src

If you don't want to use ~evil-define-key~ for global keybindings, you can use this:
#+begin_src emacs-lisp
(general-define-key :keymap evil-normal-state-map
                    "j" 'my-j
                    "k" 'my-k)
;; or 
(setq general-default-keymap evil-normal-state-map)
(general-define-key "j" 'my-j
                    "k" 'my-k)
;; or
(general-evil-setup)
(general-nmap "j" 'my-j
              "k" 'my-k)
;; what it would look like with define-key
(define-key evil-normal-state-map "j" 'my-j)
(define-key evil-normal-state-map "k" 'my-k)
#+end_src

Note that keybindings made for normal state in the global map will override keybindings made for evil-normal-state-map.

** Creating Extra Keybinding Functions (Advanced)
The primary purpose of this package is to provide a single function for key definitions that is simple and flexible. Most users probably won't want to use this functionality (apart from ~general-evil-setup~). However, if you would like more specific keybinding functions for certain prefixes, evil states, or keymaps, this package provides macros to generate these functions.

The ~general-create-definer~ macro can create functions for more succinctly defining keys. This is how the ~nmap~, ~vmap~, etc. functions are created:
#+begin_src emacs-lisp
(general-create-definer my-nmap :keymap evil-normal-state-map)
(my-nmap "w" 'evil-forward-word-begin)
#+end_src

It can also be used to implement a command to always use a certain prefix without having to always specify it (like ~evil-leader~ does):
#+begin_src emacs-lisp
(general-create-definer my-leader1 :keymap global-map :prefix "C-c")
;; bind "C-c o" to other-window
(my-leader1 "o" 'other-window)
#+end_src

The user could also set ~general-default-prefix~, ~general-default-state~, or ~general-default-keymap~ to a different value within a function to achieve a similar effect.

** Using Without Keyword Arguments (Not Recommended)
If you prefer positional arguments for some reason, this package also provides ~general-define-key-positional~ and ~general-create-positional-definer~. If anyone would prefer to use these and never have =cl-lib= required, let me know, and I will add an option for this.

*** Noteworthy Difference
Since the arguments are positional, having the prefix-key as nil is not the same thing as having it as "". If you never want to specify a prefix or want to specify a fixed prefix, you should give a string here:
#+begin_src emacs-lisp
;; binding w
(general-create-positional-definer nmap "" nil evil-normal-state-map)
(nmap nil "w" 'evil-forward-word-begin)
(general-create-positional-definer nmap nil nil evil-normal-state-map)
(nmap "" nil "w" 'evil-forward-word-begin)
#+end_src
